#pragma once

#include <iostream>
#include <vector>

class Node
{
public:
	// Конструкторы (по умолчанию и с параметрами)
	// Получение/изменение ключа узла (целое число)
	// Получение/изменение потомков узла
private:
	int key;
	Node* left;
	Node* right;
};

class BinaryTree
{
public:
	// Конструкторы (по умолчанию, копирования, перемещения)  
	// Деструктор  
	// Получение корня дерева  
	// Очистка дерева (удаление всех узлов)  
	// Удаление поддеревьев узла  
	// IsEmpty (возвращает true, если дерево пусто)  
	// Получение высоты дерева  
	// Получение количества узлов дерева  
	// Получение минимального/максимального ключа дерева  
	// Добавление узла в дерево (методом случайного выбора поддерева)  
	// Удаление узла из дерева по ключу (возвращает true, если узел был удалён)  
	// Поиск узла дерева по ключу  
	// Проверка дерева на сбалансированность (возвращает true, если дерево является сбалансированным: высоты правого и левого поддеревьев отличаются не более, чем на единицу, и сами поддеревья также являются сбалансированными)  
	// Получение уровня вершины по ключу (возвращает индекс уровня или -1, если вершина не найдена)  
	// Получение вектора (std::vector<int>), содержащего все ключи дерева по возрастанию (обход вершин производить любым способом)  
	// Вывод в консоль дерева в горизонтальном виде (самый правый потомок находится на первой строке, самый левый - на нижней)  
	// Вывод в консоль дерева по уровням в консоль  
	// Оператор присваивания  
	// Оператор перемещения  
private:
	Node* root;
};